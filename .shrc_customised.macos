export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

[[ ! x$TERM =~ xrxvt ]] && [[ ! x$TERM =~ xscreen ]] && [[ ! x$TERM =~ xxterm ]] && setterm -clrtabs
[[ ! x$TERM =~ xrxvt ]] && [[ ! x$TERM =~ xscreen ]] && [[ ! x$TERM =~ xxterm ]] && setterm -regtabs 4
[ -f $HOME/.pretty_prompt_console ] && source $HOME/.pretty_prompt_console
[ -f /Applications/i2p/i2prouter ] && /Applications/i2p/i2prouter start >/dev/null 2>&1

pgrep ssh-agent >/dev/null || (eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa)

if [ -n "$BASH_VERSION" ]; then
	test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"
fi

#alias vim='test -S /tmp/nvimsocket -a x$(pgrep nvim) != x && echo "vim already started, use nvr to operate." || NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim -u ~/.config/nvim/init.vim'
alias lc=$(git root)/node_modules/.bin/leetcode

export PATH=$HOME/go/bin:$HOME/bin/flutter/bin/cache/dart-sdk/bin:$HOME/bin/flutter/bin:/Users/v/Library/Python/3.8/bin:/usr/local/opt/mysql-client/bin:/usr/local/sbin:/usr/local/usr/bin:$GOPATH/bin:/usr/local/lib/ruby/gems/2.5.0/bin/:$PATH

export SPORT=29932
export CLASSPATH=".:/usr/local/lib/antlr-4.8-complete.jar:$CLASSPATH"

__conda_folder="$(ls -d $HOME/*conda* 2>/dev/null)"
if [ ! -z ${__conda_folder} ]; then
    __conda_setup="$( ${__conda_folder}/bin/conda 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        #eval "$__conda_setup"
        CONDA_SETUP="$__conda_setup"
        export CONDA_SETUP
    else
        if [ -f "${__conda_folder}/etc/profile.d/conda.sh" ]; then
            . "${__conda_folder}/etc/profile.d/conda.sh"
        else
            export PATH="${__conda_folder}/bin:$PATH"
        fi
    fi
    unset __conda_setup
fi

test -e /usr/libexec/java_home && export JAVA_HOME=$(/usr/libexec/java_home)

# Get list of gnubin directories
#if type brew &>/dev/null; then
#  HOMEBREW_PREFIX=$(brew --prefix)
#  # gnubin; gnuman
#  for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnubin; do export PATH=$d:$PATH; done
#  # I actually like that man grep gives the BSD grep man page
#  #for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnuman; do export MANPATH=$d:$MANPATH; done
#fi

export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM="auto"

export ANDROID_HOME=$HOME/Library/Android/sdk

#color_my_prompt () {
#j    local __user_and_host="\[\033[01;32m\]\u@\h"
#j    local __cur_location="\[\033[01;34m\]\w"
#j    local __git_branch_color="\[\033[31m\]"
#j    local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
#j    local __prompt_tail="\[\033[35m\]$"
#j    local __last_color="\[\033[00m\]"
#j    export PS1="$__user_and_host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
#j}

if [ "$(echo $0)" = "-bash" ]; then

  ###-begin-leetcode-completions-###
  #
  # yargs command completion script
  #
  # Installation: leetcode completion >> ~/.bashrc
  #    or leetcode completion >> ~/.bash_profile on OSX.
  #
  _yargs_completions()
  {
      local cur_word args type_list
  
      cur_word="${COMP_WORDS[COMP_CWORD]}"
      args=("${COMP_WORDS[@]}")
  
      # ask yargs to generate completions.
      type_list=$(leetcode --get-yargs-completions "${args[@]}")
  
      COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )
  
      # if no match was found, fall back to filename completion
      if [ ${#COMPREPLY[@]} -eq 0 ]; then
        COMPREPLY=( $(compgen -f -- "${cur_word}" ) )
      fi
  
      return 0
  }
  complete -F _yargs_completions leetcode
  ###-end-leetcode-completions-###
fi

export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/

alias connect='fpipe | trap "" INT;  ncat localhost'
alias gdrive='gdrive  --service-account go-2-learn-00c8bf796e90.json'
stty eof ^\f

### { for mac
pgrep nix-daemon >/dev/null || ( which launchctl &>/dev/null && sudo launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist && sudo launchctl start org.nixos.nix-daemon )
[ -d /Volumes/CaseSensitive/ ] || hdiutil attach $HOME/not-backup/CaseSensitive.sparseimage >/dev/null 2>&1
### }

if [ -d /nix/var/nix/profiles/default/etc/profile.d/ ]; then
  source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
  source /nix/var/nix/profiles/default/etc/profile.d/nix.sh
fi
export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH

export SSH_PORT=29922

alias mutt='/usr/bin/proxychains4 /usr/bin/neomutt'

[ x$FISH = x1 -o -f $HOME/.enable_fish ] && fish
export AOS_SDK_PATH="$HOME/works/AliOS-Things"
