exit
exit()
exit
exit()
s = 'alright'
sL = [x for x in s]
sL
sL = [x:x for x in s]
sL = {x:x for x in s}
SL
sL
pair
len(sL)
len(s)
zip
help zip
help('zip')
zip('q','d')
zz=zip('q','d')
zz
zz.__next()__
zz.__next__
zz.__next__()
zz.__next__().__next__()
zz.__next__().__next__
list.remove
list.copy
help(list.copy)
list()
l = list()
l.append('a')
l
l.last()
l.last
l.tail
list
help(list)
a='abcd'
a
help(str)
a.index('a')
a.index('b')
a.index('e')
list(a)
al = list(a)
list.index('e')
al.index('e')
al.find('e')
help(list)
al
al.count('e')
al.count(a)
a
al
al[4]
al[3]
al[len(al)-1]
al.append('d')
al
al.last()
exit()
range(2,4)
print(range(2,4))
print([x for x in range(2,4)])
if 2 in [1,2]
if 2 in [1,2]:
	print("yes")
help(set)
'a'=='b'
'ab'=='b'
help(pair)
('a','b')
ans
_
tu = _
tu
a = list()
a.append(tu)
a
tuple
help(tuple)
tu
tu[0]
tu[1]
tu[2]
exit()
zip('a','b')
z = zip('a','b')
a
z
z[0]
z[1]
exit
exit9)
exit()
help(in)
exit()
exit
exit()
a=1
("a is odd", "a is even")[a % 2 == 0]
True+True
True+True-False
true
int(True)
int(False)
help(dict.get)
d = {}
d
d = set()
d
d = dict()
d
d.get('a')
print(d.get('a'))
None
l = [x for x in range(10)]
l
l[:]
l[:-1]
l[:-2]
l[:-2:]
l[:-2::]
l[:-5:]
l[::-1]
l[::-2]
l[::]
l[::2]
l[::3]
l[::-3]
l[:-3]
l[:3]
l[:6]
l[:6:2]
l[:6:-1]
l[:6:-0]
help(list.getvalues)
help(list)
hlep(enumerate)
help(enumerate)
"%.3f" % 3.1415927
"%6.3f" % 3.1415927
help(sorted)
l
dict(zip(l,l))
for k,v in _:
	print(k,v)
d = dict(zip(l,l))
d
for k,v in d:
	print(k)
for k,v in d.items():
 print(k)
l
ll=l+1
for i,j in zip(l,l):
	print i
for i,j in zip(l,l):
	print(i)
l
clear
ll=[x*x for x in l]
zip(l,ll)
z = _
z
z[0]
d = {x:xx for x, xx in z}
d
d[8]
d.get(8,9)
d.get(10,9)
ll,l=zip(*z)
z
a,b=zip(*z)
help(unzip)
help(zip)
pring(z)
print(z)
zip
zip(*z)
uz=zip(*z)
uz
z
print(uz)
help(zip)
for x in uz:
	print(x)
uz
for x in z:
	print x
for x in z:
	print(x)
z
z=zip(l,ll)
for x in z:
	print(x)
for x in z:
	print(x[0])
for x in z:
	print(x)
z
help(getattr)
exit
exit()
help(max)
help(tuple)
tuple=(13,23)
t=tuple
t[0]
t[1]
t[2]
exit()
exit
exit()
add = lambda: (3,(-1,-1))
add(
)
add()[0]
add()[1]
_,move = add()
move
exit()
A= [1,2,3]
b=[0 1 0]
b=[0,1,0[
]
b=[0,1,0]
A(b)
A.find(b)
A[b]
A.b
help(find)
exit()
exit
exit()
exit
exit()
exit
exit()
q
help(join)
help(str)
list=[1,2,3]
".".join(list)
list=["1","2","3"]
".".join(list)
list.pop
list
help(list)
list=list.pop
list
print(list)
list=['1', '2', '3']
list=list.pop()
list
".".join(list)
list=["3"]
".".join(list)
list
".".join(list)
clear
squares=[x**2 for x in range(9)]
squares[8:3]
squares[8:3:-1]
squares[1:1:-1]
squares[1:8:-1]
squares[1:-1:-1]
squares[1::-1]
squares[-1:-5:-1]
squares
squares[-5]
clear
a=[[0]*2]*2
a[0][0]=5
print (a)
a[0][1]=-1
print (a)
id(a[0])
id(a[1])
id(a[1][1])
id(a[1][0])
help(list)
a=[0]*3
print(a)
print(b)
a=[0]
a
a=a*2
a
print(a)
clear
x=('.'.join(str(i) for i in range(7,9)))
x
x[:2]
a=[4,6,5,4]
set(a)
list(set(a))[1]
print(list(set(a)[1])
)
print(list(set(a))[1])
set(a)
a
print(__version__)
exi
exit
exit()
exit
exit()
type(brian)
type(brian2)
ipykernel_launcher
from ipykernel_launcher import *
from ipykernel import *
type(ipykernel_launcher)
exi
exit
exit()
import tensorflow as tf
exit
exit()
exit
exit()
import tensorflow as tf
exit
eixt()
q
quit
quit()
q
quit
quit()
quit
quit9)
quit()
import tensorflow as tf
exit
exit()
import tensorflow as tf
exit
exit()
import tensorflow as tf
exit
clear
exit()
q
quit
quit()
import tensorflow as tf
exit()
import tensorflow as tf
quit
quit()
exit
exit()
quit()
import tensorflow as tf
exit
exit()
quit9)
exit
exit()]
exit()
exit
exit()
import tensorflow as tf
tf.
tf.help()
tf.start()
exit
exit(
)
import numpy as np
help(np.array.flatten)
help(np.array)
np.ones(3,3)
np.ones(3)
np.ones(9)
np.ones(9,1)
np.ones(9).reshape(3,3)
b=np.ones(9).reshape(3,3)
b-1
b*b
b/b
b-b
help(np.argmin)
help(np.apply_along_axis)
print(__version__)
exit()
import sklearn
sklearn.__version__
quit
quit()
exit()
exit
exit()
alist = [1,2,3]
def check_l(list):
    return list is alist
blist = alist
print(check_l(blist))
blist = alist[:]
print(check_l(blist))
!echo __name__
__name__
builtins
help(builtins)
help(del)
del
del x
x = a
x = 1
del x
x
def scope_test():
    def do_local():
        spam = "local spam"
    def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"
    def do_global():
        global spam
        spam = "global spam"
    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)
scope_test()
print("In global scope:", spam)
exit
exit9)
exit()
a = 1
b = 2.0
a / b
type(a)
type(b_
)
type(b)
exit
exit()
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from matplotlib.figure import Figure
from matplotlib.backends.backend_gtk3agg import FigureCanvas
from matplotlib.backends.backend_gtk3 import (
    NavigationToolbar2GTK3 as NavigationToolbar)
win = Gtk.Window()
win.connect("destroy", lambda x: Gtk.main_quit())
win.set_default_size(400,300)
win.set_title("Embedding in GTK")
vbox = Gtk.VBox()
win.add(vbox)
fig = Figure(figsize=(5,4), dpi=100)
ax = fig.add_subplot(111)
ax.plot([1,2,3])
canvas = FigureCanvas(fig)  # a Gtk.DrawingArea
vbox.pack_start(canvas, True, True, 0)
toolbar = NavigationToolbar(canvas, win)
vbox.pack_start(toolbar, False, False, 0)
win.show_all()
Gtk.main()
exit
exit()
e
E
math.e
math.E
import math
math.E
math.e
math.e**(-22)
math.e**(-22)/(1+math.e**(-22))**2
import numpy as np
np.random.randomn(2,3)
np.random.nrandom(2,3)
np.random.random(2,3)
np.random.random(9)
np.random.randn(2,3)
if not []:
    print ("not")
np.random.random(9)
a=np.random.random(9)
a.empty()
a.empty
len(a)
exit
exit()
help max
help(max)
	
import tensorflow as tf
help(tf.placeholder)
import tensorflow as tf
help(tf.random_normal)
help(tf.matmal)
help(tf.matmul)
help(tf.random_normal)
help(tf.shape)
help(tf.add)
help(tf.train.GradientDescentOptimizer)
help(tf.argmax)
help(tf.equal)
help(tf.reshape)
help(tf.nn.conv2d)
help(tf.nn.biasadd)
help(tf.nn.*)
help(tf.nn.conv.biasadd)
help (tf.nn)
help (tf.nn.max_pool)
help(tensorflow.python.ops.nn_ops)
help(tf.python.ops.nn_ops)
help (tf.nn.bias)
help (tf.nn.dropout
)
help(tf.placeholder)
import tensorflow as tf
print(tf.__version__)
quit
import matplotlib.pyplot as pyplot
import cv2
exit
exit()
import keras
print(keras.__version__)
exit
import tensorflow as tf
print(tf.__version__)
print(keras.__version__)
import keras
print(keras.__version__)
import sys
print(sys.path)
exit
exit()
54 // 3
54 % 3
54 / 3
54 / 4
54 // 4
54 % 4
xit
exit()
import gensim
gensim.models.KeyedVectores.load_word2vec_format('/Users/v/not-backup/word2vec-GoogleNews-vectors-master/GoogleNews-vectors-negative300.bin.gz', binary=True)
gensim.models.KeyedVectors.load_word2vec_format('/Users/v/not-backup/word2vec-GoogleNews-vectors-master/GoogleNews-vectors-negative300.bin.gz', binary=True)
gensim.models.KeyedVectors.load_word2vec_format('/Users/v/not-backup/GoogleNews-vectors-negative300.bin.gz', binary=True)
help(gensim.models.KeyedVectors)
it
ans
exit
ls
float('inf')
'
{1,2,3}
a={1,2,3}
2 in a
2 not in a
exit
exit()
480/640
1736/2416
614/819
138/6
138/122*25
138/122*25/400
0.8**6
exit
exit()
a=[range(5)
]
a
a=list(range(5))
a
a[-2::-1]
a[-2:]
a=list(range(10))
a
a[-10]
a[-11]
exit
a=list(range(3))
a.index(1)
help(a.index)
fg
exit
import math
math.abs(-1)
abs(-1)
fg
exit
fg
2**31
exit
exit()
a = (1,2,3,89)
a
a[2]
for i in a: print (i)
type(a)
class Primes:
    def __init__(self, max):
        self.max = max
        self.number = 1    
    def __iter__(self):
        return self    
    def __next__(self):
        self.number += 1
        if self.number >= self.max:
            raise StopIteration
        elif check_prime(self.number):
            return self.number
        else:
            return self.__next__()
pp = Primes(100)
for i in pp[5]: print(i)
pp[5]
pp
for i in pp: print(i)
def check_prime(n):
  for i in range(2, n**0.5+1):
    if n // i == 0:
      return False
  return True
for i in pp: print(i)
def check_prime(n):
...   for i in range(2, n**0.5+1):
...     if n // i == 0:
...       return False
...   return True
5 % 3
exit()
s="test"
s.find("es")
s.find("ess")
exit9)
exit()
print(3^3)
print(3**3**3)
print(2**2**3)
exit()
exit
/Users/v/anaconda3/bin/pythonw
exit
exit()
