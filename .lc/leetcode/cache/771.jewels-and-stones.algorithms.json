{"id":782,"fid":771,"name":"Jewels and Stones","slug":"jewels-and-stones","link":"https://leetcode.com/problems/jewels-and-stones/description/","percent":84.87874671812753,"level":"Easy","category":"algorithms","totalAC":"409.9K","totalSubmit":"482.9K","likes":1879,"dislikes":335,"desc":"<p>You&#39;re given strings <code>J</code> representing the types of stones that are jewels, and <code>S</code> representing the stones you have.&nbsp; Each character in <code>S</code> is a type of stone you have.&nbsp; You want to know how many of the stones you have are also jewels.</p>\r\n\r\n<p>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>\r\n\t<li>The characters in <code>J</code> are distinct.</li>\r\n</ul>\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numJewelsInStones(string J, string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numJewelsInStones(String J, String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numJewelsInStones(self, J: str, S: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"\n\nint numJewelsInStones(char * J, char * S){\n\n}\n\n"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumJewelsInStones(string J, string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} J\n * @param {string} S\n * @return {number}\n */\nvar numJewelsInStones = function(J, S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} j\n# @param {String} s\n# @return {Integer}\ndef num_jewels_in_stones(j, s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numJewelsInStones(_ J: String, _ S: String) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numJewelsInStones(J string, S string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numJewelsInStones(J: String, S: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numJewelsInStones(J: String, S: String): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_jewels_in_stones(j: String, s: String) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $J\n     * @param String $S\n     * @return Integer\n     */\n    function numJewelsInStones($J, $S) {\n        \n    }\n}"}],"testcase":"\"aA\"\n\"aAAbbbb\"","testable":true,"templateMeta":{"name":"numJewelsInStones","params":[{"name":"J","type":"string"},{"name":"S","type":"string"}],"return":{"type":"integer"}}}